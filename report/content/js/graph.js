/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 273.0, "minX": 0.0, "maxY": 14030.0, "series": [{"data": [[0.0, 273.0], [0.1, 296.0], [0.2, 305.0], [0.3, 305.0], [0.4, 348.0], [0.5, 349.0], [0.6, 350.0], [0.7, 351.0], [0.8, 358.0], [0.9, 362.0], [1.0, 363.0], [1.1, 382.0], [1.2, 408.0], [1.3, 480.0], [1.4, 480.0], [1.5, 484.0], [1.6, 499.0], [1.7, 501.0], [1.8, 503.0], [1.9, 503.0], [2.0, 543.0], [2.1, 547.0], [2.2, 556.0], [2.3, 562.0], [2.4, 589.0], [2.5, 598.0], [2.6, 603.0], [2.7, 606.0], [2.8, 613.0], [2.9, 642.0], [3.0, 644.0], [3.1, 670.0], [3.2, 767.0], [3.3, 833.0], [3.4, 842.0], [3.5, 850.0], [3.6, 870.0], [3.7, 907.0], [3.8, 913.0], [3.9, 924.0], [4.0, 929.0], [4.1, 930.0], [4.2, 942.0], [4.3, 956.0], [4.4, 1002.0], [4.5, 1004.0], [4.6, 1007.0], [4.7, 1009.0], [4.8, 1010.0], [4.9, 1015.0], [5.0, 1019.0], [5.1, 1023.0], [5.2, 1030.0], [5.3, 1043.0], [5.4, 1061.0], [5.5, 1067.0], [5.6, 1077.0], [5.7, 1079.0], [5.8, 1085.0], [5.9, 1090.0], [6.0, 1093.0], [6.1, 1095.0], [6.2, 1097.0], [6.3, 1097.0], [6.4, 1104.0], [6.5, 1106.0], [6.6, 1109.0], [6.7, 1117.0], [6.8, 1120.0], [6.9, 1129.0], [7.0, 1137.0], [7.1, 1147.0], [7.2, 1147.0], [7.3, 1148.0], [7.4, 1174.0], [7.5, 1176.0], [7.6, 1181.0], [7.7, 1195.0], [7.8, 1222.0], [7.9, 1234.0], [8.0, 1237.0], [8.1, 1240.0], [8.2, 1243.0], [8.3, 1245.0], [8.4, 1265.0], [8.5, 1269.0], [8.6, 1272.0], [8.7, 1276.0], [8.8, 1277.0], [8.9, 1284.0], [9.0, 1289.0], [9.1, 1297.0], [9.2, 1298.0], [9.3, 1302.0], [9.4, 1315.0], [9.5, 1315.0], [9.6, 1316.0], [9.7, 1319.0], [9.8, 1325.0], [9.9, 1328.0], [10.0, 1328.0], [10.1, 1351.0], [10.2, 1353.0], [10.3, 1367.0], [10.4, 1376.0], [10.5, 1379.0], [10.6, 1387.0], [10.7, 1393.0], [10.8, 1395.0], [10.9, 1397.0], [11.0, 1397.0], [11.1, 1398.0], [11.2, 1399.0], [11.3, 1400.0], [11.4, 1416.0], [11.5, 1416.0], [11.6, 1425.0], [11.7, 1428.0], [11.8, 1428.0], [11.9, 1437.0], [12.0, 1442.0], [12.1, 1444.0], [12.2, 1454.0], [12.3, 1454.0], [12.4, 1457.0], [12.5, 1462.0], [12.6, 1475.0], [12.7, 1475.0], [12.8, 1475.0], [12.9, 1475.0], [13.0, 1475.0], [13.1, 1476.0], [13.2, 1476.0], [13.3, 1492.0], [13.4, 1501.0], [13.5, 1526.0], [13.6, 1545.0], [13.7, 1545.0], [13.8, 1563.0], [13.9, 1588.0], [14.0, 1590.0], [14.1, 1591.0], [14.2, 1616.0], [14.3, 1623.0], [14.4, 1627.0], [14.5, 1631.0], [14.6, 1658.0], [14.7, 1661.0], [14.8, 1664.0], [14.9, 1672.0], [15.0, 1695.0], [15.1, 1697.0], [15.2, 1701.0], [15.3, 1706.0], [15.4, 1716.0], [15.5, 1721.0], [15.6, 1752.0], [15.7, 1764.0], [15.8, 1803.0], [15.9, 1814.0], [16.0, 1819.0], [16.1, 1826.0], [16.2, 1834.0], [16.3, 1840.0], [16.4, 1847.0], [16.5, 1881.0], [16.6, 1886.0], [16.7, 1934.0], [16.8, 1935.0], [16.9, 1953.0], [17.0, 1974.0], [17.1, 1974.0], [17.2, 1976.0], [17.3, 1976.0], [17.4, 1983.0], [17.5, 1985.0], [17.6, 1993.0], [17.7, 2000.0], [17.8, 2007.0], [17.9, 2018.0], [18.0, 2025.0], [18.1, 2025.0], [18.2, 2026.0], [18.3, 2026.0], [18.4, 2029.0], [18.5, 2032.0], [18.6, 2034.0], [18.7, 2041.0], [18.8, 2042.0], [18.9, 2043.0], [19.0, 2045.0], [19.1, 2046.0], [19.2, 2047.0], [19.3, 2047.0], [19.4, 2048.0], [19.5, 2049.0], [19.6, 2052.0], [19.7, 2061.0], [19.8, 2064.0], [19.9, 2067.0], [20.0, 2071.0], [20.1, 2077.0], [20.2, 2077.0], [20.3, 2079.0], [20.4, 2081.0], [20.5, 2082.0], [20.6, 2082.0], [20.7, 2084.0], [20.8, 2108.0], [20.9, 2118.0], [21.0, 2128.0], [21.1, 2132.0], [21.2, 2133.0], [21.3, 2135.0], [21.4, 2137.0], [21.5, 2139.0], [21.6, 2141.0], [21.7, 2145.0], [21.8, 2146.0], [21.9, 2148.0], [22.0, 2148.0], [22.1, 2149.0], [22.2, 2155.0], [22.3, 2157.0], [22.4, 2165.0], [22.5, 2165.0], [22.6, 2166.0], [22.7, 2172.0], [22.8, 2175.0], [22.9, 2176.0], [23.0, 2177.0], [23.1, 2177.0], [23.2, 2178.0], [23.3, 2181.0], [23.4, 2187.0], [23.5, 2195.0], [23.6, 2203.0], [23.7, 2205.0], [23.8, 2205.0], [23.9, 2210.0], [24.0, 2211.0], [24.1, 2214.0], [24.2, 2215.0], [24.3, 2216.0], [24.4, 2218.0], [24.5, 2220.0], [24.6, 2224.0], [24.7, 2225.0], [24.8, 2226.0], [24.9, 2227.0], [25.0, 2228.0], [25.1, 2229.0], [25.2, 2230.0], [25.3, 2231.0], [25.4, 2238.0], [25.5, 2241.0], [25.6, 2245.0], [25.7, 2246.0], [25.8, 2247.0], [25.9, 2257.0], [26.0, 2259.0], [26.1, 2261.0], [26.2, 2265.0], [26.3, 2277.0], [26.4, 2278.0], [26.5, 2288.0], [26.6, 2302.0], [26.7, 2308.0], [26.8, 2310.0], [26.9, 2318.0], [27.0, 2320.0], [27.1, 2322.0], [27.2, 2323.0], [27.3, 2324.0], [27.4, 2325.0], [27.5, 2329.0], [27.6, 2329.0], [27.7, 2332.0], [27.8, 2332.0], [27.9, 2335.0], [28.0, 2339.0], [28.1, 2341.0], [28.2, 2341.0], [28.3, 2344.0], [28.4, 2347.0], [28.5, 2350.0], [28.6, 2359.0], [28.7, 2359.0], [28.8, 2364.0], [28.9, 2365.0], [29.0, 2365.0], [29.1, 2381.0], [29.2, 2391.0], [29.3, 2397.0], [29.4, 2401.0], [29.5, 2404.0], [29.6, 2415.0], [29.7, 2422.0], [29.8, 2422.0], [29.9, 2423.0], [30.0, 2424.0], [30.1, 2429.0], [30.2, 2431.0], [30.3, 2433.0], [30.4, 2441.0], [30.5, 2443.0], [30.6, 2445.0], [30.7, 2449.0], [30.8, 2456.0], [30.9, 2462.0], [31.0, 2476.0], [31.1, 2508.0], [31.2, 2509.0], [31.3, 2509.0], [31.4, 2521.0], [31.5, 2523.0], [31.6, 2525.0], [31.7, 2528.0], [31.8, 2532.0], [31.9, 2534.0], [32.0, 2543.0], [32.1, 2544.0], [32.2, 2546.0], [32.3, 2572.0], [32.4, 2582.0], [32.5, 2583.0], [32.6, 2584.0], [32.7, 2590.0], [32.8, 2590.0], [32.9, 2592.0], [33.0, 2594.0], [33.1, 2597.0], [33.2, 2612.0], [33.3, 2617.0], [33.4, 2630.0], [33.5, 2634.0], [33.6, 2639.0], [33.7, 2643.0], [33.8, 2651.0], [33.9, 2652.0], [34.0, 2667.0], [34.1, 2681.0], [34.2, 2694.0], [34.3, 2697.0], [34.4, 2706.0], [34.5, 2708.0], [34.6, 2721.0], [34.7, 2722.0], [34.8, 2735.0], [34.9, 2781.0], [35.0, 2785.0], [35.1, 2789.0], [35.2, 2829.0], [35.3, 2831.0], [35.4, 2842.0], [35.5, 2849.0], [35.6, 2863.0], [35.7, 2873.0], [35.8, 2891.0], [35.9, 2897.0], [36.0, 2897.0], [36.1, 2906.0], [36.2, 2908.0], [36.3, 2920.0], [36.4, 2920.0], [36.5, 2922.0], [36.6, 2927.0], [36.7, 2954.0], [36.8, 2991.0], [36.9, 2992.0], [37.0, 3006.0], [37.1, 3029.0], [37.2, 3031.0], [37.3, 3037.0], [37.4, 3041.0], [37.5, 3067.0], [37.6, 3075.0], [37.7, 3082.0], [37.8, 3099.0], [37.9, 3107.0], [38.0, 3110.0], [38.1, 3111.0], [38.2, 3132.0], [38.3, 3135.0], [38.4, 3144.0], [38.5, 3196.0], [38.6, 3203.0], [38.7, 3220.0], [38.8, 3227.0], [38.9, 3255.0], [39.0, 3302.0], [39.1, 3310.0], [39.2, 3314.0], [39.3, 3320.0], [39.4, 3325.0], [39.5, 3337.0], [39.6, 3348.0], [39.7, 3412.0], [39.8, 3420.0], [39.9, 3452.0], [40.0, 3457.0], [40.1, 3471.0], [40.2, 3492.0], [40.3, 3496.0], [40.4, 3500.0], [40.5, 3517.0], [40.6, 3523.0], [40.7, 3534.0], [40.8, 3549.0], [40.9, 3549.0], [41.0, 3559.0], [41.1, 3565.0], [41.2, 3571.0], [41.3, 3585.0], [41.4, 3590.0], [41.5, 3597.0], [41.6, 3601.0], [41.7, 3602.0], [41.8, 3615.0], [41.9, 3638.0], [42.0, 3650.0], [42.1, 3659.0], [42.2, 3675.0], [42.3, 3681.0], [42.4, 3699.0], [42.5, 3705.0], [42.6, 3721.0], [42.7, 3747.0], [42.8, 3757.0], [42.9, 3766.0], [43.0, 3780.0], [43.1, 3786.0], [43.2, 3812.0], [43.3, 3820.0], [43.4, 3828.0], [43.5, 3829.0], [43.6, 3839.0], [43.7, 3869.0], [43.8, 3887.0], [43.9, 3893.0], [44.0, 3905.0], [44.1, 3910.0], [44.2, 3912.0], [44.3, 3932.0], [44.4, 3936.0], [44.5, 3958.0], [44.6, 3961.0], [44.7, 3964.0], [44.8, 3972.0], [44.9, 3994.0], [45.0, 4002.0], [45.1, 4003.0], [45.2, 4065.0], [45.3, 4069.0], [45.4, 4070.0], [45.5, 4086.0], [45.6, 4089.0], [45.7, 4091.0], [45.8, 4104.0], [45.9, 4106.0], [46.0, 4128.0], [46.1, 4131.0], [46.2, 4149.0], [46.3, 4151.0], [46.4, 4151.0], [46.5, 4163.0], [46.6, 4173.0], [46.7, 4175.0], [46.8, 4185.0], [46.9, 4202.0], [47.0, 4202.0], [47.1, 4204.0], [47.2, 4220.0], [47.3, 4224.0], [47.4, 4229.0], [47.5, 4230.0], [47.6, 4232.0], [47.7, 4248.0], [47.8, 4250.0], [47.9, 4253.0], [48.0, 4255.0], [48.1, 4260.0], [48.2, 4262.0], [48.3, 4275.0], [48.4, 4275.0], [48.5, 4275.0], [48.6, 4281.0], [48.7, 4288.0], [48.8, 4294.0], [48.9, 4339.0], [49.0, 4348.0], [49.1, 4377.0], [49.2, 4384.0], [49.3, 4386.0], [49.4, 4387.0], [49.5, 4387.0], [49.6, 4388.0], [49.7, 4391.0], [49.8, 4397.0], [49.9, 4398.0], [50.0, 4405.0], [50.1, 4419.0], [50.2, 4424.0], [50.3, 4429.0], [50.4, 4433.0], [50.5, 4435.0], [50.6, 4442.0], [50.7, 4449.0], [50.8, 4455.0], [50.9, 4460.0], [51.0, 4462.0], [51.1, 4473.0], [51.2, 4477.0], [51.3, 4477.0], [51.4, 4484.0], [51.5, 4486.0], [51.6, 4486.0], [51.7, 4487.0], [51.8, 4492.0], [51.9, 4498.0], [52.0, 4518.0], [52.1, 4527.0], [52.2, 4536.0], [52.3, 4537.0], [52.4, 4542.0], [52.5, 4555.0], [52.6, 4572.0], [52.7, 4582.0], [52.8, 4591.0], [52.9, 4595.0], [53.0, 4609.0], [53.1, 4632.0], [53.2, 4638.0], [53.3, 4642.0], [53.4, 4645.0], [53.5, 4645.0], [53.6, 4651.0], [53.7, 4653.0], [53.8, 4659.0], [53.9, 4662.0], [54.0, 4664.0], [54.1, 4668.0], [54.2, 4673.0], [54.3, 4686.0], [54.4, 4694.0], [54.5, 4698.0], [54.6, 4702.0], [54.7, 4705.0], [54.8, 4714.0], [54.9, 4725.0], [55.0, 4728.0], [55.1, 4729.0], [55.2, 4730.0], [55.3, 4783.0], [55.4, 4785.0], [55.5, 4796.0], [55.6, 4808.0], [55.7, 4808.0], [55.8, 4819.0], [55.9, 4821.0], [56.0, 4845.0], [56.1, 4850.0], [56.2, 4852.0], [56.3, 4858.0], [56.4, 4859.0], [56.5, 4859.0], [56.6, 4864.0], [56.7, 4870.0], [56.8, 4871.0], [56.9, 4874.0], [57.0, 4881.0], [57.1, 4890.0], [57.2, 4897.0], [57.3, 4912.0], [57.4, 4919.0], [57.5, 4921.0], [57.6, 4938.0], [57.7, 4939.0], [57.8, 4941.0], [57.9, 4944.0], [58.0, 4945.0], [58.1, 4955.0], [58.2, 4957.0], [58.3, 4966.0], [58.4, 4966.0], [58.5, 4968.0], [58.6, 4978.0], [58.7, 4979.0], [58.8, 4986.0], [58.9, 4995.0], [59.0, 4995.0], [59.1, 5004.0], [59.2, 5004.0], [59.3, 5033.0], [59.4, 5037.0], [59.5, 5038.0], [59.6, 5040.0], [59.7, 5043.0], [59.8, 5050.0], [59.9, 5056.0], [60.0, 5074.0], [60.1, 5136.0], [60.2, 5141.0], [60.3, 5148.0], [60.4, 5158.0], [60.5, 5158.0], [60.6, 5168.0], [60.7, 5171.0], [60.8, 5186.0], [60.9, 5189.0], [61.0, 5196.0], [61.1, 5215.0], [61.2, 5227.0], [61.3, 5244.0], [61.4, 5267.0], [61.5, 5284.0], [61.6, 5294.0], [61.7, 5295.0], [61.8, 5299.0], [61.9, 5302.0], [62.0, 5321.0], [62.1, 5328.0], [62.2, 5343.0], [62.3, 5347.0], [62.4, 5353.0], [62.5, 5367.0], [62.6, 5371.0], [62.7, 5391.0], [62.8, 5410.0], [62.9, 5436.0], [63.0, 5440.0], [63.1, 5481.0], [63.2, 5553.0], [63.3, 5561.0], [63.4, 5570.0], [63.5, 5584.0], [63.6, 5586.0], [63.7, 5586.0], [63.8, 5596.0], [63.9, 5597.0], [64.0, 5610.0], [64.1, 5638.0], [64.2, 5646.0], [64.3, 5656.0], [64.4, 5668.0], [64.5, 5674.0], [64.6, 5692.0], [64.7, 5718.0], [64.8, 5719.0], [64.9, 5725.0], [65.0, 5751.0], [65.1, 5752.0], [65.2, 5776.0], [65.3, 5788.0], [65.4, 5789.0], [65.5, 5789.0], [65.6, 5797.0], [65.7, 5802.0], [65.8, 5811.0], [65.9, 5820.0], [66.0, 5820.0], [66.1, 5836.0], [66.2, 5837.0], [66.3, 5838.0], [66.4, 5845.0], [66.5, 5868.0], [66.6, 5886.0], [66.7, 5887.0], [66.8, 5891.0], [66.9, 5896.0], [67.0, 5909.0], [67.1, 5940.0], [67.2, 5941.0], [67.3, 5966.0], [67.4, 5967.0], [67.5, 5971.0], [67.6, 5982.0], [67.7, 5988.0], [67.8, 5992.0], [67.9, 5999.0], [68.0, 6000.0], [68.1, 6004.0], [68.2, 6021.0], [68.3, 6033.0], [68.4, 6050.0], [68.5, 6074.0], [68.6, 6097.0], [68.7, 6101.0], [68.8, 6103.0], [68.9, 6104.0], [69.0, 6125.0], [69.1, 6128.0], [69.2, 6141.0], [69.3, 6153.0], [69.4, 6160.0], [69.5, 6164.0], [69.6, 6169.0], [69.7, 6173.0], [69.8, 6178.0], [69.9, 6185.0], [70.0, 6196.0], [70.1, 6200.0], [70.2, 6206.0], [70.3, 6210.0], [70.4, 6211.0], [70.5, 6216.0], [70.6, 6217.0], [70.7, 6225.0], [70.8, 6231.0], [70.9, 6250.0], [71.0, 6251.0], [71.1, 6251.0], [71.2, 6263.0], [71.3, 6270.0], [71.4, 6276.0], [71.5, 6279.0], [71.6, 6297.0], [71.7, 6305.0], [71.8, 6306.0], [71.9, 6331.0], [72.0, 6335.0], [72.1, 6336.0], [72.2, 6348.0], [72.3, 6350.0], [72.4, 6360.0], [72.5, 6391.0], [72.6, 6398.0], [72.7, 6412.0], [72.8, 6415.0], [72.9, 6421.0], [73.0, 6424.0], [73.1, 6427.0], [73.2, 6434.0], [73.3, 6442.0], [73.4, 6463.0], [73.5, 6471.0], [73.6, 6477.0], [73.7, 6478.0], [73.8, 6478.0], [73.9, 6480.0], [74.0, 6485.0], [74.1, 6487.0], [74.2, 6490.0], [74.3, 6499.0], [74.4, 6506.0], [74.5, 6508.0], [74.6, 6521.0], [74.7, 6530.0], [74.8, 6533.0], [74.9, 6562.0], [75.0, 6568.0], [75.1, 6568.0], [75.2, 6593.0], [75.3, 6684.0], [75.4, 6699.0], [75.5, 6708.0], [75.6, 6709.0], [75.7, 6713.0], [75.8, 6719.0], [75.9, 6734.0], [76.0, 6737.0], [76.1, 6743.0], [76.2, 6759.0], [76.3, 6775.0], [76.4, 6778.0], [76.5, 6785.0], [76.6, 6800.0], [76.7, 6806.0], [76.8, 6816.0], [76.9, 6818.0], [77.0, 6830.0], [77.1, 6832.0], [77.2, 6847.0], [77.3, 6855.0], [77.4, 6877.0], [77.5, 6892.0], [77.6, 6894.0], [77.7, 6916.0], [77.8, 6946.0], [77.9, 6951.0], [78.0, 6966.0], [78.1, 6973.0], [78.2, 6977.0], [78.3, 6977.0], [78.4, 6979.0], [78.5, 6990.0], [78.6, 7020.0], [78.7, 7029.0], [78.8, 7030.0], [78.9, 7030.0], [79.0, 7033.0], [79.1, 7038.0], [79.2, 7039.0], [79.3, 7050.0], [79.4, 7058.0], [79.5, 7070.0], [79.6, 7076.0], [79.7, 7080.0], [79.8, 7081.0], [79.9, 7081.0], [80.0, 7084.0], [80.1, 7086.0], [80.2, 7088.0], [80.3, 7095.0], [80.4, 7098.0], [80.5, 7104.0], [80.6, 7107.0], [80.7, 7115.0], [80.8, 7126.0], [80.9, 7128.0], [81.0, 7129.0], [81.1, 7143.0], [81.2, 7162.0], [81.3, 7178.0], [81.4, 7186.0], [81.5, 7191.0], [81.6, 7194.0], [81.7, 7194.0], [81.8, 7197.0], [81.9, 7220.0], [82.0, 7236.0], [82.1, 7261.0], [82.2, 7261.0], [82.3, 7266.0], [82.4, 7268.0], [82.5, 7271.0], [82.6, 7275.0], [82.7, 7287.0], [82.8, 7291.0], [82.9, 7299.0], [83.0, 7302.0], [83.1, 7305.0], [83.2, 7343.0], [83.3, 7363.0], [83.4, 7382.0], [83.5, 7392.0], [83.6, 7418.0], [83.7, 7432.0], [83.8, 7456.0], [83.9, 7471.0], [84.0, 7480.0], [84.1, 7480.0], [84.2, 7507.0], [84.3, 7530.0], [84.4, 7533.0], [84.5, 7548.0], [84.6, 7553.0], [84.7, 7558.0], [84.8, 7559.0], [84.9, 7562.0], [85.0, 7633.0], [85.1, 7667.0], [85.2, 7683.0], [85.3, 7716.0], [85.4, 7732.0], [85.5, 7757.0], [85.6, 7761.0], [85.7, 7762.0], [85.8, 7764.0], [85.9, 7773.0], [86.0, 7794.0], [86.1, 7809.0], [86.2, 7821.0], [86.3, 7824.0], [86.4, 7840.0], [86.5, 7840.0], [86.6, 7844.0], [86.7, 7854.0], [86.8, 7867.0], [86.9, 7868.0], [87.0, 7872.0], [87.1, 7882.0], [87.2, 7885.0], [87.3, 7899.0], [87.4, 7911.0], [87.5, 7976.0], [87.6, 7981.0], [87.7, 7981.0], [87.8, 7985.0], [87.9, 7995.0], [88.0, 7996.0], [88.1, 8003.0], [88.2, 8004.0], [88.3, 8013.0], [88.4, 8055.0], [88.5, 8060.0], [88.6, 8061.0], [88.7, 8083.0], [88.8, 8090.0], [88.9, 8092.0], [89.0, 8136.0], [89.1, 8170.0], [89.2, 8174.0], [89.3, 8243.0], [89.4, 8278.0], [89.5, 8283.0], [89.6, 8296.0], [89.7, 8310.0], [89.8, 8348.0], [89.9, 8364.0], [90.0, 8365.0], [90.1, 8389.0], [90.2, 8403.0], [90.3, 8406.0], [90.4, 8426.0], [90.5, 8452.0], [90.6, 8469.0], [90.7, 8474.0], [90.8, 8502.0], [90.9, 8508.0], [91.0, 8518.0], [91.1, 8534.0], [91.2, 8558.0], [91.3, 8574.0], [91.4, 8592.0], [91.5, 8593.0], [91.6, 8615.0], [91.7, 8656.0], [91.8, 8666.0], [91.9, 8679.0], [92.0, 8694.0], [92.1, 8697.0], [92.2, 8703.0], [92.3, 8728.0], [92.4, 8740.0], [92.5, 8746.0], [92.6, 8778.0], [92.7, 8781.0], [92.8, 8788.0], [92.9, 8792.0], [93.0, 8807.0], [93.1, 8817.0], [93.2, 8824.0], [93.3, 8826.0], [93.4, 8827.0], [93.5, 8864.0], [93.6, 8896.0], [93.7, 8898.0], [93.8, 8901.0], [93.9, 8947.0], [94.0, 8952.0], [94.1, 8960.0], [94.2, 8981.0], [94.3, 8991.0], [94.4, 8994.0], [94.5, 9017.0], [94.6, 9043.0], [94.7, 9051.0], [94.8, 9245.0], [94.9, 9302.0], [95.0, 9315.0], [95.1, 9322.0], [95.2, 9337.0], [95.3, 9368.0], [95.4, 9379.0], [95.5, 9417.0], [95.6, 9494.0], [95.7, 9522.0], [95.8, 9578.0], [95.9, 9628.0], [96.0, 9683.0], [96.1, 9750.0], [96.2, 9755.0], [96.3, 9763.0], [96.4, 9806.0], [96.5, 9829.0], [96.6, 9833.0], [96.7, 9871.0], [96.8, 9892.0], [96.9, 9945.0], [97.0, 10037.0], [97.1, 10049.0], [97.2, 10133.0], [97.3, 10136.0], [97.4, 10150.0], [97.5, 10169.0], [97.6, 10210.0], [97.7, 10223.0], [97.8, 10231.0], [97.9, 10237.0], [98.0, 10249.0], [98.1, 10257.0], [98.2, 10275.0], [98.3, 10311.0], [98.4, 10330.0], [98.5, 10352.0], [98.6, 10386.0], [98.7, 10403.0], [98.8, 10477.0], [98.9, 10502.0], [99.0, 10525.0], [99.1, 10527.0], [99.2, 10541.0], [99.3, 10575.0], [99.4, 10633.0], [99.5, 10647.0], [99.6, 10825.0], [99.7, 10872.0], [99.8, 11047.0], [99.9, 14030.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[0.0, 273.0], [0.1, 296.0], [0.2, 305.0], [0.3, 305.0], [0.4, 348.0], [0.5, 349.0], [0.6, 350.0], [0.7, 351.0], [0.8, 358.0], [0.9, 362.0], [1.0, 363.0], [1.1, 382.0], [1.2, 408.0], [1.3, 480.0], [1.4, 480.0], [1.5, 484.0], [1.6, 499.0], [1.7, 501.0], [1.8, 503.0], [1.9, 503.0], [2.0, 543.0], [2.1, 547.0], [2.2, 556.0], [2.3, 562.0], [2.4, 589.0], [2.5, 598.0], [2.6, 603.0], [2.7, 606.0], [2.8, 613.0], [2.9, 642.0], [3.0, 644.0], [3.1, 670.0], [3.2, 767.0], [3.3, 833.0], [3.4, 842.0], [3.5, 850.0], [3.6, 870.0], [3.7, 907.0], [3.8, 913.0], [3.9, 924.0], [4.0, 929.0], [4.1, 930.0], [4.2, 942.0], [4.3, 956.0], [4.4, 1002.0], [4.5, 1004.0], [4.6, 1007.0], [4.7, 1009.0], [4.8, 1010.0], [4.9, 1015.0], [5.0, 1019.0], [5.1, 1023.0], [5.2, 1030.0], [5.3, 1043.0], [5.4, 1061.0], [5.5, 1067.0], [5.6, 1077.0], [5.7, 1079.0], [5.8, 1085.0], [5.9, 1090.0], [6.0, 1093.0], [6.1, 1095.0], [6.2, 1097.0], [6.3, 1097.0], [6.4, 1104.0], [6.5, 1106.0], [6.6, 1109.0], [6.7, 1117.0], [6.8, 1120.0], [6.9, 1129.0], [7.0, 1137.0], [7.1, 1147.0], [7.2, 1147.0], [7.3, 1148.0], [7.4, 1174.0], [7.5, 1176.0], [7.6, 1181.0], [7.7, 1195.0], [7.8, 1222.0], [7.9, 1234.0], [8.0, 1237.0], [8.1, 1240.0], [8.2, 1243.0], [8.3, 1245.0], [8.4, 1265.0], [8.5, 1269.0], [8.6, 1272.0], [8.7, 1276.0], [8.8, 1277.0], [8.9, 1284.0], [9.0, 1289.0], [9.1, 1297.0], [9.2, 1298.0], [9.3, 1302.0], [9.4, 1315.0], [9.5, 1315.0], [9.6, 1316.0], [9.7, 1319.0], [9.8, 1325.0], [9.9, 1328.0], [10.0, 1328.0], [10.1, 1351.0], [10.2, 1353.0], [10.3, 1367.0], [10.4, 1376.0], [10.5, 1379.0], [10.6, 1387.0], [10.7, 1393.0], [10.8, 1395.0], [10.9, 1397.0], [11.0, 1397.0], [11.1, 1398.0], [11.2, 1399.0], [11.3, 1400.0], [11.4, 1416.0], [11.5, 1416.0], [11.6, 1425.0], [11.7, 1428.0], [11.8, 1428.0], [11.9, 1437.0], [12.0, 1442.0], [12.1, 1444.0], [12.2, 1454.0], [12.3, 1454.0], [12.4, 1457.0], [12.5, 1462.0], [12.6, 1475.0], [12.7, 1475.0], [12.8, 1475.0], [12.9, 1475.0], [13.0, 1475.0], [13.1, 1476.0], [13.2, 1476.0], [13.3, 1492.0], [13.4, 1501.0], [13.5, 1526.0], [13.6, 1545.0], [13.7, 1545.0], [13.8, 1563.0], [13.9, 1588.0], [14.0, 1590.0], [14.1, 1591.0], [14.2, 1616.0], [14.3, 1623.0], [14.4, 1627.0], [14.5, 1631.0], [14.6, 1658.0], [14.7, 1661.0], [14.8, 1664.0], [14.9, 1672.0], [15.0, 1695.0], [15.1, 1697.0], [15.2, 1701.0], [15.3, 1706.0], [15.4, 1716.0], [15.5, 1721.0], [15.6, 1752.0], [15.7, 1764.0], [15.8, 1803.0], [15.9, 1814.0], [16.0, 1819.0], [16.1, 1826.0], [16.2, 1834.0], [16.3, 1840.0], [16.4, 1847.0], [16.5, 1881.0], [16.6, 1886.0], [16.7, 1934.0], [16.8, 1935.0], [16.9, 1953.0], [17.0, 1974.0], [17.1, 1974.0], [17.2, 1976.0], [17.3, 1976.0], [17.4, 1983.0], [17.5, 1985.0], [17.6, 1993.0], [17.7, 2000.0], [17.8, 2007.0], [17.9, 2018.0], [18.0, 2025.0], [18.1, 2025.0], [18.2, 2026.0], [18.3, 2026.0], [18.4, 2029.0], [18.5, 2032.0], [18.6, 2034.0], [18.7, 2041.0], [18.8, 2042.0], [18.9, 2043.0], [19.0, 2045.0], [19.1, 2046.0], [19.2, 2047.0], [19.3, 2047.0], [19.4, 2048.0], [19.5, 2049.0], [19.6, 2052.0], [19.7, 2061.0], [19.8, 2064.0], [19.9, 2067.0], [20.0, 2071.0], [20.1, 2077.0], [20.2, 2077.0], [20.3, 2079.0], [20.4, 2081.0], [20.5, 2082.0], [20.6, 2082.0], [20.7, 2084.0], [20.8, 2108.0], [20.9, 2118.0], [21.0, 2128.0], [21.1, 2132.0], [21.2, 2133.0], [21.3, 2135.0], [21.4, 2137.0], [21.5, 2139.0], [21.6, 2141.0], [21.7, 2145.0], [21.8, 2146.0], [21.9, 2148.0], [22.0, 2148.0], [22.1, 2149.0], [22.2, 2155.0], [22.3, 2157.0], [22.4, 2165.0], [22.5, 2165.0], [22.6, 2166.0], [22.7, 2172.0], [22.8, 2175.0], [22.9, 2176.0], [23.0, 2177.0], [23.1, 2177.0], [23.2, 2178.0], [23.3, 2181.0], [23.4, 2187.0], [23.5, 2195.0], [23.6, 2203.0], [23.7, 2205.0], [23.8, 2205.0], [23.9, 2210.0], [24.0, 2211.0], [24.1, 2214.0], [24.2, 2215.0], [24.3, 2216.0], [24.4, 2218.0], [24.5, 2220.0], [24.6, 2224.0], [24.7, 2225.0], [24.8, 2226.0], [24.9, 2227.0], [25.0, 2228.0], [25.1, 2229.0], [25.2, 2230.0], [25.3, 2231.0], [25.4, 2238.0], [25.5, 2241.0], [25.6, 2245.0], [25.7, 2246.0], [25.8, 2247.0], [25.9, 2257.0], [26.0, 2259.0], [26.1, 2261.0], [26.2, 2265.0], [26.3, 2277.0], [26.4, 2278.0], [26.5, 2288.0], [26.6, 2302.0], [26.7, 2308.0], [26.8, 2310.0], [26.9, 2318.0], [27.0, 2320.0], [27.1, 2322.0], [27.2, 2323.0], [27.3, 2324.0], [27.4, 2325.0], [27.5, 2329.0], [27.6, 2329.0], [27.7, 2332.0], [27.8, 2332.0], [27.9, 2335.0], [28.0, 2339.0], [28.1, 2341.0], [28.2, 2341.0], [28.3, 2344.0], [28.4, 2347.0], [28.5, 2350.0], [28.6, 2359.0], [28.7, 2359.0], [28.8, 2364.0], [28.9, 2365.0], [29.0, 2365.0], [29.1, 2381.0], [29.2, 2391.0], [29.3, 2397.0], [29.4, 2401.0], [29.5, 2404.0], [29.6, 2415.0], [29.7, 2422.0], [29.8, 2422.0], [29.9, 2423.0], [30.0, 2424.0], [30.1, 2429.0], [30.2, 2431.0], [30.3, 2433.0], [30.4, 2441.0], [30.5, 2443.0], [30.6, 2445.0], [30.7, 2449.0], [30.8, 2456.0], [30.9, 2462.0], [31.0, 2476.0], [31.1, 2508.0], [31.2, 2509.0], [31.3, 2509.0], [31.4, 2521.0], [31.5, 2523.0], [31.6, 2525.0], [31.7, 2528.0], [31.8, 2532.0], [31.9, 2534.0], [32.0, 2543.0], [32.1, 2544.0], [32.2, 2546.0], [32.3, 2572.0], [32.4, 2582.0], [32.5, 2583.0], [32.6, 2584.0], [32.7, 2590.0], [32.8, 2590.0], [32.9, 2592.0], [33.0, 2594.0], [33.1, 2597.0], [33.2, 2612.0], [33.3, 2617.0], [33.4, 2630.0], [33.5, 2634.0], [33.6, 2639.0], [33.7, 2643.0], [33.8, 2651.0], [33.9, 2652.0], [34.0, 2667.0], [34.1, 2681.0], [34.2, 2694.0], [34.3, 2697.0], [34.4, 2706.0], [34.5, 2708.0], [34.6, 2721.0], [34.7, 2722.0], [34.8, 2735.0], [34.9, 2781.0], [35.0, 2785.0], [35.1, 2789.0], [35.2, 2829.0], [35.3, 2831.0], [35.4, 2842.0], [35.5, 2849.0], [35.6, 2863.0], [35.7, 2873.0], [35.8, 2891.0], [35.9, 2897.0], [36.0, 2897.0], [36.1, 2906.0], [36.2, 2908.0], [36.3, 2920.0], [36.4, 2920.0], [36.5, 2922.0], [36.6, 2927.0], [36.7, 2954.0], [36.8, 2991.0], [36.9, 2992.0], [37.0, 3006.0], [37.1, 3029.0], [37.2, 3031.0], [37.3, 3037.0], [37.4, 3041.0], [37.5, 3067.0], [37.6, 3075.0], [37.7, 3082.0], [37.8, 3099.0], [37.9, 3107.0], [38.0, 3110.0], [38.1, 3111.0], [38.2, 3132.0], [38.3, 3135.0], [38.4, 3144.0], [38.5, 3196.0], [38.6, 3203.0], [38.7, 3220.0], [38.8, 3227.0], [38.9, 3255.0], [39.0, 3302.0], [39.1, 3310.0], [39.2, 3314.0], [39.3, 3320.0], [39.4, 3325.0], [39.5, 3337.0], [39.6, 3348.0], [39.7, 3412.0], [39.8, 3420.0], [39.9, 3452.0], [40.0, 3457.0], [40.1, 3471.0], [40.2, 3492.0], [40.3, 3496.0], [40.4, 3500.0], [40.5, 3517.0], [40.6, 3523.0], [40.7, 3534.0], [40.8, 3549.0], [40.9, 3549.0], [41.0, 3559.0], [41.1, 3565.0], [41.2, 3571.0], [41.3, 3585.0], [41.4, 3590.0], [41.5, 3597.0], [41.6, 3601.0], [41.7, 3602.0], [41.8, 3615.0], [41.9, 3638.0], [42.0, 3650.0], [42.1, 3659.0], [42.2, 3675.0], [42.3, 3681.0], [42.4, 3699.0], [42.5, 3705.0], [42.6, 3721.0], [42.7, 3747.0], [42.8, 3757.0], [42.9, 3766.0], [43.0, 3780.0], [43.1, 3786.0], [43.2, 3812.0], [43.3, 3820.0], [43.4, 3828.0], [43.5, 3829.0], [43.6, 3839.0], [43.7, 3869.0], [43.8, 3887.0], [43.9, 3893.0], [44.0, 3905.0], [44.1, 3910.0], [44.2, 3912.0], [44.3, 3932.0], [44.4, 3936.0], [44.5, 3958.0], [44.6, 3961.0], [44.7, 3964.0], [44.8, 3972.0], [44.9, 3994.0], [45.0, 4002.0], [45.1, 4003.0], [45.2, 4065.0], [45.3, 4069.0], [45.4, 4070.0], [45.5, 4086.0], [45.6, 4089.0], [45.7, 4091.0], [45.8, 4104.0], [45.9, 4106.0], [46.0, 4128.0], [46.1, 4131.0], [46.2, 4149.0], [46.3, 4151.0], [46.4, 4151.0], [46.5, 4163.0], [46.6, 4173.0], [46.7, 4175.0], [46.8, 4185.0], [46.9, 4202.0], [47.0, 4202.0], [47.1, 4204.0], [47.2, 4220.0], [47.3, 4224.0], [47.4, 4229.0], [47.5, 4230.0], [47.6, 4232.0], [47.7, 4248.0], [47.8, 4250.0], [47.9, 4253.0], [48.0, 4255.0], [48.1, 4260.0], [48.2, 4262.0], [48.3, 4275.0], [48.4, 4275.0], [48.5, 4275.0], [48.6, 4281.0], [48.7, 4288.0], [48.8, 4294.0], [48.9, 4339.0], [49.0, 4348.0], [49.1, 4377.0], [49.2, 4384.0], [49.3, 4386.0], [49.4, 4387.0], [49.5, 4387.0], [49.6, 4388.0], [49.7, 4391.0], [49.8, 4397.0], [49.9, 4398.0], [50.0, 4405.0], [50.1, 4419.0], [50.2, 4424.0], [50.3, 4429.0], [50.4, 4433.0], [50.5, 4435.0], [50.6, 4442.0], [50.7, 4449.0], [50.8, 4455.0], [50.9, 4460.0], [51.0, 4462.0], [51.1, 4473.0], [51.2, 4477.0], [51.3, 4477.0], [51.4, 4484.0], [51.5, 4486.0], [51.6, 4486.0], [51.7, 4487.0], [51.8, 4492.0], [51.9, 4498.0], [52.0, 4518.0], [52.1, 4527.0], [52.2, 4536.0], [52.3, 4537.0], [52.4, 4542.0], [52.5, 4555.0], [52.6, 4572.0], [52.7, 4582.0], [52.8, 4591.0], [52.9, 4595.0], [53.0, 4609.0], [53.1, 4632.0], [53.2, 4638.0], [53.3, 4642.0], [53.4, 4645.0], [53.5, 4645.0], [53.6, 4651.0], [53.7, 4653.0], [53.8, 4659.0], [53.9, 4662.0], [54.0, 4664.0], [54.1, 4668.0], [54.2, 4673.0], [54.3, 4686.0], [54.4, 4694.0], [54.5, 4698.0], [54.6, 4702.0], [54.7, 4705.0], [54.8, 4714.0], [54.9, 4725.0], [55.0, 4728.0], [55.1, 4729.0], [55.2, 4730.0], [55.3, 4783.0], [55.4, 4785.0], [55.5, 4796.0], [55.6, 4808.0], [55.7, 4808.0], [55.8, 4819.0], [55.9, 4821.0], [56.0, 4845.0], [56.1, 4850.0], [56.2, 4852.0], [56.3, 4858.0], [56.4, 4859.0], [56.5, 4859.0], [56.6, 4864.0], [56.7, 4870.0], [56.8, 4871.0], [56.9, 4874.0], [57.0, 4881.0], [57.1, 4890.0], [57.2, 4897.0], [57.3, 4912.0], [57.4, 4919.0], [57.5, 4921.0], [57.6, 4938.0], [57.7, 4939.0], [57.8, 4941.0], [57.9, 4944.0], [58.0, 4945.0], [58.1, 4955.0], [58.2, 4957.0], [58.3, 4966.0], [58.4, 4966.0], [58.5, 4968.0], [58.6, 4978.0], [58.7, 4979.0], [58.8, 4986.0], [58.9, 4995.0], [59.0, 4995.0], [59.1, 5004.0], [59.2, 5004.0], [59.3, 5033.0], [59.4, 5037.0], [59.5, 5038.0], [59.6, 5040.0], [59.7, 5043.0], [59.8, 5050.0], [59.9, 5056.0], [60.0, 5074.0], [60.1, 5136.0], [60.2, 5141.0], [60.3, 5148.0], [60.4, 5158.0], [60.5, 5158.0], [60.6, 5168.0], [60.7, 5171.0], [60.8, 5186.0], [60.9, 5189.0], [61.0, 5196.0], [61.1, 5215.0], [61.2, 5227.0], [61.3, 5244.0], [61.4, 5267.0], [61.5, 5284.0], [61.6, 5294.0], [61.7, 5295.0], [61.8, 5299.0], [61.9, 5302.0], [62.0, 5321.0], [62.1, 5328.0], [62.2, 5343.0], [62.3, 5347.0], [62.4, 5353.0], [62.5, 5367.0], [62.6, 5371.0], [62.7, 5391.0], [62.8, 5410.0], [62.9, 5436.0], [63.0, 5440.0], [63.1, 5481.0], [63.2, 5553.0], [63.3, 5561.0], [63.4, 5570.0], [63.5, 5584.0], [63.6, 5586.0], [63.7, 5586.0], [63.8, 5596.0], [63.9, 5597.0], [64.0, 5610.0], [64.1, 5638.0], [64.2, 5646.0], [64.3, 5656.0], [64.4, 5668.0], [64.5, 5674.0], [64.6, 5692.0], [64.7, 5718.0], [64.8, 5719.0], [64.9, 5725.0], [65.0, 5751.0], [65.1, 5752.0], [65.2, 5776.0], [65.3, 5788.0], [65.4, 5789.0], [65.5, 5789.0], [65.6, 5797.0], [65.7, 5802.0], [65.8, 5811.0], [65.9, 5820.0], [66.0, 5820.0], [66.1, 5836.0], [66.2, 5837.0], [66.3, 5838.0], [66.4, 5845.0], [66.5, 5868.0], [66.6, 5886.0], [66.7, 5887.0], [66.8, 5891.0], [66.9, 5896.0], [67.0, 5909.0], [67.1, 5940.0], [67.2, 5941.0], [67.3, 5966.0], [67.4, 5967.0], [67.5, 5971.0], [67.6, 5982.0], [67.7, 5988.0], [67.8, 5992.0], [67.9, 5999.0], [68.0, 6000.0], [68.1, 6004.0], [68.2, 6021.0], [68.3, 6033.0], [68.4, 6050.0], [68.5, 6074.0], [68.6, 6097.0], [68.7, 6101.0], [68.8, 6103.0], [68.9, 6104.0], [69.0, 6125.0], [69.1, 6128.0], [69.2, 6141.0], [69.3, 6153.0], [69.4, 6160.0], [69.5, 6164.0], [69.6, 6169.0], [69.7, 6173.0], [69.8, 6178.0], [69.9, 6185.0], [70.0, 6196.0], [70.1, 6200.0], [70.2, 6206.0], [70.3, 6210.0], [70.4, 6211.0], [70.5, 6216.0], [70.6, 6217.0], [70.7, 6225.0], [70.8, 6231.0], [70.9, 6250.0], [71.0, 6251.0], [71.1, 6251.0], [71.2, 6263.0], [71.3, 6270.0], [71.4, 6276.0], [71.5, 6279.0], [71.6, 6297.0], [71.7, 6305.0], [71.8, 6306.0], [71.9, 6331.0], [72.0, 6335.0], [72.1, 6336.0], [72.2, 6348.0], [72.3, 6350.0], [72.4, 6360.0], [72.5, 6391.0], [72.6, 6398.0], [72.7, 6412.0], [72.8, 6415.0], [72.9, 6421.0], [73.0, 6424.0], [73.1, 6427.0], [73.2, 6434.0], [73.3, 6442.0], [73.4, 6463.0], [73.5, 6471.0], [73.6, 6477.0], [73.7, 6478.0], [73.8, 6478.0], [73.9, 6480.0], [74.0, 6485.0], [74.1, 6487.0], [74.2, 6490.0], [74.3, 6499.0], [74.4, 6506.0], [74.5, 6508.0], [74.6, 6521.0], [74.7, 6530.0], [74.8, 6533.0], [74.9, 6562.0], [75.0, 6568.0], [75.1, 6568.0], [75.2, 6593.0], [75.3, 6684.0], [75.4, 6699.0], [75.5, 6708.0], [75.6, 6709.0], [75.7, 6713.0], [75.8, 6719.0], [75.9, 6734.0], [76.0, 6737.0], [76.1, 6743.0], [76.2, 6759.0], [76.3, 6775.0], [76.4, 6778.0], [76.5, 6785.0], [76.6, 6800.0], [76.7, 6806.0], [76.8, 6816.0], [76.9, 6818.0], [77.0, 6830.0], [77.1, 6832.0], [77.2, 6847.0], [77.3, 6855.0], [77.4, 6877.0], [77.5, 6892.0], [77.6, 6894.0], [77.7, 6916.0], [77.8, 6946.0], [77.9, 6951.0], [78.0, 6966.0], [78.1, 6973.0], [78.2, 6977.0], [78.3, 6977.0], [78.4, 6979.0], [78.5, 6990.0], [78.6, 7020.0], [78.7, 7029.0], [78.8, 7030.0], [78.9, 7030.0], [79.0, 7033.0], [79.1, 7038.0], [79.2, 7039.0], [79.3, 7050.0], [79.4, 7058.0], [79.5, 7070.0], [79.6, 7076.0], [79.7, 7080.0], [79.8, 7081.0], [79.9, 7081.0], [80.0, 7084.0], [80.1, 7086.0], [80.2, 7088.0], [80.3, 7095.0], [80.4, 7098.0], [80.5, 7104.0], [80.6, 7107.0], [80.7, 7115.0], [80.8, 7126.0], [80.9, 7128.0], [81.0, 7129.0], [81.1, 7143.0], [81.2, 7162.0], [81.3, 7178.0], [81.4, 7186.0], [81.5, 7191.0], [81.6, 7194.0], [81.7, 7194.0], [81.8, 7197.0], [81.9, 7220.0], [82.0, 7236.0], [82.1, 7261.0], [82.2, 7261.0], [82.3, 7266.0], [82.4, 7268.0], [82.5, 7271.0], [82.6, 7275.0], [82.7, 7287.0], [82.8, 7291.0], [82.9, 7299.0], [83.0, 7302.0], [83.1, 7305.0], [83.2, 7343.0], [83.3, 7363.0], [83.4, 7382.0], [83.5, 7392.0], [83.6, 7418.0], [83.7, 7432.0], [83.8, 7456.0], [83.9, 7471.0], [84.0, 7480.0], [84.1, 7480.0], [84.2, 7507.0], [84.3, 7530.0], [84.4, 7533.0], [84.5, 7548.0], [84.6, 7553.0], [84.7, 7558.0], [84.8, 7559.0], [84.9, 7562.0], [85.0, 7633.0], [85.1, 7667.0], [85.2, 7683.0], [85.3, 7716.0], [85.4, 7732.0], [85.5, 7757.0], [85.6, 7761.0], [85.7, 7762.0], [85.8, 7764.0], [85.9, 7773.0], [86.0, 7794.0], [86.1, 7809.0], [86.2, 7821.0], [86.3, 7824.0], [86.4, 7840.0], [86.5, 7840.0], [86.6, 7844.0], [86.7, 7854.0], [86.8, 7867.0], [86.9, 7868.0], [87.0, 7872.0], [87.1, 7882.0], [87.2, 7885.0], [87.3, 7899.0], [87.4, 7911.0], [87.5, 7976.0], [87.6, 7981.0], [87.7, 7981.0], [87.8, 7985.0], [87.9, 7995.0], [88.0, 7996.0], [88.1, 8003.0], [88.2, 8004.0], [88.3, 8013.0], [88.4, 8055.0], [88.5, 8060.0], [88.6, 8061.0], [88.7, 8083.0], [88.8, 8090.0], [88.9, 8092.0], [89.0, 8136.0], [89.1, 8170.0], [89.2, 8174.0], [89.3, 8243.0], [89.4, 8278.0], [89.5, 8283.0], [89.6, 8296.0], [89.7, 8310.0], [89.8, 8348.0], [89.9, 8364.0], [90.0, 8365.0], [90.1, 8389.0], [90.2, 8403.0], [90.3, 8406.0], [90.4, 8426.0], [90.5, 8452.0], [90.6, 8469.0], [90.7, 8474.0], [90.8, 8502.0], [90.9, 8508.0], [91.0, 8518.0], [91.1, 8534.0], [91.2, 8558.0], [91.3, 8574.0], [91.4, 8592.0], [91.5, 8593.0], [91.6, 8615.0], [91.7, 8656.0], [91.8, 8666.0], [91.9, 8679.0], [92.0, 8694.0], [92.1, 8697.0], [92.2, 8703.0], [92.3, 8728.0], [92.4, 8740.0], [92.5, 8746.0], [92.6, 8778.0], [92.7, 8781.0], [92.8, 8788.0], [92.9, 8792.0], [93.0, 8807.0], [93.1, 8817.0], [93.2, 8824.0], [93.3, 8826.0], [93.4, 8827.0], [93.5, 8864.0], [93.6, 8896.0], [93.7, 8898.0], [93.8, 8901.0], [93.9, 8947.0], [94.0, 8952.0], [94.1, 8960.0], [94.2, 8981.0], [94.3, 8991.0], [94.4, 8994.0], [94.5, 9017.0], [94.6, 9043.0], [94.7, 9051.0], [94.8, 9245.0], [94.9, 9302.0], [95.0, 9315.0], [95.1, 9322.0], [95.2, 9337.0], [95.3, 9368.0], [95.4, 9379.0], [95.5, 9417.0], [95.6, 9494.0], [95.7, 9522.0], [95.8, 9578.0], [95.9, 9628.0], [96.0, 9683.0], [96.1, 9750.0], [96.2, 9755.0], [96.3, 9763.0], [96.4, 9806.0], [96.5, 9829.0], [96.6, 9833.0], [96.7, 9871.0], [96.8, 9892.0], [96.9, 9945.0], [97.0, 10037.0], [97.1, 10049.0], [97.2, 10133.0], [97.3, 10136.0], [97.4, 10150.0], [97.5, 10169.0], [97.6, 10210.0], [97.7, 10223.0], [97.8, 10231.0], [97.9, 10237.0], [98.0, 10249.0], [98.1, 10257.0], [98.2, 10275.0], [98.3, 10311.0], [98.4, 10330.0], [98.5, 10352.0], [98.6, 10386.0], [98.7, 10403.0], [98.8, 10477.0], [98.9, 10502.0], [99.0, 10525.0], [99.1, 10527.0], [99.2, 10541.0], [99.3, 10575.0], [99.4, 10633.0], [99.5, 10647.0], [99.6, 10825.0], [99.7, 10872.0], [99.8, 11047.0], [99.9, 14030.0]], "isOverall": false, "label": "https://reqres.in/api/users?page=2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 30.0, "series": [{"data": [[200.0, 2.0], [300.0, 10.0], [400.0, 4.0], [500.0, 9.0], [600.0, 6.0], [700.0, 1.0], [800.0, 4.0], [900.0, 8.0], [1000.0, 20.0], [1100.0, 14.0], [1200.0, 15.0], [1300.0, 20.0], [1400.0, 21.0], [1500.0, 8.0], [1600.0, 10.0], [1700.0, 6.0], [1800.0, 9.0], [1900.0, 10.0], [2000.0, 30.0], [2100.0, 28.0], [2200.0, 30.0], [2300.0, 28.0], [2400.0, 17.0], [2500.0, 21.0], [2600.0, 12.0], [2700.0, 8.0], [2800.0, 9.0], [2900.0, 9.0], [3000.0, 9.0], [3100.0, 7.0], [3300.0, 7.0], [3200.0, 4.0], [3400.0, 7.0], [3500.0, 12.0], [3700.0, 7.0], [3600.0, 9.0], [3800.0, 8.0], [3900.0, 10.0], [4000.0, 8.0], [4300.0, 11.0], [4100.0, 11.0], [4200.0, 20.0], [4500.0, 10.0], [4400.0, 20.0], [4600.0, 16.0], [4700.0, 10.0], [4800.0, 17.0], [5000.0, 10.0], [4900.0, 18.0], [5100.0, 10.0], [5200.0, 8.0], [5300.0, 9.0], [5600.0, 7.0], [5500.0, 8.0], [5400.0, 4.0], [5800.0, 13.0], [5700.0, 10.0], [5900.0, 10.0], [6100.0, 14.0], [6000.0, 7.0], [6300.0, 10.0], [6200.0, 16.0], [6400.0, 17.0], [6500.0, 10.0], [6600.0, 2.0], [6700.0, 11.0], [6800.0, 11.0], [6900.0, 9.0], [7000.0, 19.0], [7100.0, 14.0], [7200.0, 11.0], [7300.0, 6.0], [7400.0, 6.0], [7500.0, 8.0], [7600.0, 3.0], [7900.0, 7.0], [7800.0, 13.0], [7700.0, 8.0], [8100.0, 3.0], [8000.0, 9.0], [8300.0, 5.0], [8200.0, 4.0], [8400.0, 6.0], [8500.0, 8.0], [8600.0, 6.0], [8700.0, 8.0], [8800.0, 8.0], [8900.0, 7.0], [9000.0, 3.0], [9200.0, 1.0], [9700.0, 3.0], [9600.0, 2.0], [9400.0, 2.0], [9500.0, 2.0], [9300.0, 6.0], [9800.0, 5.0], [9900.0, 1.0], [10100.0, 4.0], [10200.0, 7.0], [10000.0, 2.0], [10500.0, 5.0], [10300.0, 4.0], [10400.0, 2.0], [10600.0, 2.0], [10800.0, 2.0], [11000.0, 1.0], [14000.0, 1.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[200.0, 2.0], [300.0, 10.0], [400.0, 4.0], [500.0, 9.0], [600.0, 6.0], [700.0, 1.0], [800.0, 4.0], [900.0, 8.0], [1000.0, 20.0], [1100.0, 14.0], [1200.0, 15.0], [1300.0, 20.0], [1400.0, 21.0], [1500.0, 8.0], [1600.0, 10.0], [1700.0, 6.0], [1800.0, 9.0], [1900.0, 10.0], [2000.0, 30.0], [2100.0, 28.0], [2200.0, 30.0], [2300.0, 28.0], [2400.0, 17.0], [2500.0, 21.0], [2600.0, 12.0], [2700.0, 8.0], [2800.0, 9.0], [2900.0, 9.0], [3000.0, 9.0], [3100.0, 7.0], [3300.0, 7.0], [3200.0, 4.0], [3400.0, 7.0], [3500.0, 12.0], [3700.0, 7.0], [3600.0, 9.0], [3800.0, 8.0], [3900.0, 10.0], [4000.0, 8.0], [4300.0, 11.0], [4100.0, 11.0], [4200.0, 20.0], [4400.0, 20.0], [4500.0, 10.0], [4600.0, 16.0], [4700.0, 10.0], [4800.0, 17.0], [5000.0, 10.0], [4900.0, 18.0], [5100.0, 10.0], [5200.0, 8.0], [5300.0, 9.0], [5600.0, 7.0], [5500.0, 8.0], [5400.0, 4.0], [5800.0, 13.0], [5700.0, 10.0], [5900.0, 10.0], [6100.0, 14.0], [6000.0, 7.0], [6300.0, 10.0], [6200.0, 16.0], [6400.0, 17.0], [6500.0, 10.0], [6600.0, 2.0], [6700.0, 11.0], [6800.0, 11.0], [6900.0, 9.0], [7000.0, 19.0], [7100.0, 14.0], [7200.0, 11.0], [7300.0, 6.0], [7400.0, 6.0], [7500.0, 8.0], [7600.0, 3.0], [7900.0, 7.0], [7800.0, 13.0], [7700.0, 8.0], [8100.0, 3.0], [8000.0, 9.0], [8300.0, 5.0], [8200.0, 4.0], [8400.0, 6.0], [8500.0, 8.0], [8600.0, 6.0], [8700.0, 8.0], [8800.0, 8.0], [8900.0, 7.0], [9000.0, 3.0], [9200.0, 1.0], [9700.0, 3.0], [9600.0, 2.0], [9400.0, 2.0], [9500.0, 2.0], [9300.0, 6.0], [9800.0, 5.0], [9900.0, 1.0], [10100.0, 4.0], [10200.0, 7.0], [10000.0, 2.0], [10500.0, 5.0], [10300.0, 4.0], [10400.0, 2.0], [10600.0, 2.0], [10800.0, 2.0], [11000.0, 1.0], [14000.0, 1.0]], "isOverall": false, "label": "https://reqres.in/api/users?page=2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 866.0, "series": [{"data": [[0.0, 16.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 118.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 866.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 353.2050000000002, "minX": 1.69272834E12, "maxY": 353.2050000000002, "series": [{"data": [[1.69272834E12, 353.2050000000002]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69272834E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 584.5, "minX": 1.0, "maxY": 14030.0, "series": [{"data": [[2.0, 6759.0], [3.0, 6250.0], [4.0, 5610.0], [5.0, 4003.0], [6.0, 3590.0], [7.0, 3457.0], [8.0, 5267.0], [9.0, 3638.0], [10.0, 4845.0], [11.0, 5215.0], [12.0, 3255.0], [13.0, 3887.0], [14.0, 4783.0], [15.0, 7392.0], [16.0, 4819.0], [17.0, 3132.0], [19.0, 3105.0], [20.0, 3310.0], [22.0, 4788.0], [23.0, 4645.0], [24.0, 3067.0], [25.0, 4729.0], [26.0, 7178.0], [27.0, 5391.0], [28.0, 3549.0], [29.0, 3203.0], [30.0, 2891.0], [31.0, 2829.0], [34.0, 4418.333333333333], [37.0, 2920.0], [36.0, 3643.0], [39.0, 2597.0], [38.0, 2863.0], [41.0, 2652.0], [40.0, 3099.0], [43.0, 2954.0], [42.0, 2643.0], [45.0, 6785.0], [47.0, 2584.0], [46.0, 3834.0], [48.0, 6800.0], [51.0, 4131.0], [50.0, 5389.0], [52.0, 5037.0], [55.0, 2449.0], [54.0, 3338.0], [57.0, 4919.0], [56.0, 2630.0], [59.0, 3082.0], [58.0, 4387.0], [61.0, 4966.0], [60.0, 2423.0], [62.0, 2789.0], [67.0, 3031.0], [66.0, 3991.0], [64.0, 3786.0], [69.0, 2359.0], [68.0, 3006.0], [75.0, 4391.0], [74.0, 4870.0], [73.0, 4551.0], [72.0, 2569.0], [77.0, 2863.0], [81.0, 2043.0], [80.0, 3090.3333333333335], [86.0, 2310.0], [85.0, 4859.0], [91.0, 2706.0], [90.0, 2476.0], [89.0, 5168.0], [88.0, 3112.0], [95.0, 2667.0], [93.0, 3399.5], [98.0, 2246.0], [97.0, 2922.0], [96.0, 2690.5], [103.0, 2433.0], [102.0, 2431.0], [105.0, 2398.0], [104.0, 2681.0], [126.0, 2523.0], [135.0, 2205.0], [134.0, 2128.0], [132.0, 2992.0], [130.0, 2171.5], [128.0, 6331.0], [143.0, 3757.0], [142.0, 2248.5], [141.0, 3337.0], [140.0, 2429.0], [139.0, 2461.0], [137.0, 3315.5], [151.0, 2359.0], [150.0, 2376.3333333333335], [148.0, 2220.3333333333335], [147.0, 2543.0], [144.0, 3604.3333333333335], [159.0, 2181.0], [158.0, 4218.5], [157.0, 4163.0], [155.0, 2289.0], [153.0, 2365.0], [152.0, 3566.6666666666665], [167.0, 2344.0], [166.0, 2302.0], [165.0, 2722.0], [164.0, 2323.0], [162.0, 4405.0], [161.0, 3705.0], [160.0, 2318.0], [175.0, 3221.25], [173.0, 2446.0], [170.0, 2026.0], [169.0, 2045.0], [168.0, 2486.0], [182.0, 2077.0], [181.0, 2082.0], [180.0, 4283.0], [179.0, 3753.5], [178.0, 2040.5], [177.0, 2032.0], [191.0, 2226.5], [189.0, 3705.6666666666665], [186.0, 2071.0], [185.0, 2048.0], [184.0, 2149.0], [198.0, 2347.0], [197.0, 3111.0], [196.0, 2156.0], [195.0, 2141.6666666666665], [194.0, 2118.0], [193.0, 2759.0], [206.0, 2213.0], [205.0, 2232.5], [203.0, 2009.0], [201.0, 2144.3333333333335], [200.0, 2332.0], [215.0, 2025.0], [214.0, 2604.6666666666665], [212.0, 3617.6666666666665], [210.0, 2550.5], [208.0, 3198.5], [223.0, 6173.0], [222.0, 1980.0], [221.0, 2049.0], [220.0, 2026.0], [219.0, 2155.0], [218.0, 1985.0], [217.0, 2176.0], [216.0, 3615.0], [231.0, 2211.0], [230.0, 3957.5], [228.0, 3783.0], [227.0, 2220.0], [225.0, 2361.5], [238.0, 2131.5], [237.0, 2325.0], [236.0, 3699.0], [235.0, 2441.0], [234.0, 2194.0], [233.0, 2177.0], [232.0, 6101.0], [246.0, 2225.0], [245.0, 2875.0], [243.0, 2081.5], [241.0, 2241.6666666666665], [254.0, 3979.6666666666665], [251.0, 4482.0], [248.0, 2506.0], [270.0, 4266.0], [268.0, 2532.0], [267.0, 3420.0], [266.0, 3565.0], [265.0, 3523.0], [264.0, 3905.0], [263.0, 3910.0], [262.0, 3663.0], [259.0, 4496.0], [256.0, 3090.0], [286.0, 4262.0], [287.0, 3041.0], [285.0, 3559.0], [284.0, 3320.0], [283.0, 4251.5], [281.0, 4260.0], [280.0, 4275.0], [279.0, 3829.0], [272.0, 3521.0], [275.0, 2521.0], [274.0, 4463.5], [278.0, 3496.0], [277.0, 3471.0], [276.0, 3650.0], [302.0, 2781.0], [303.0, 2277.0], [301.0, 2897.0], [300.0, 3107.0], [299.0, 1427.5], [297.0, 1454.0], [296.0, 1616.0], [295.0, 1545.0], [288.0, 3314.0], [290.0, 4281.0], [289.0, 4275.0], [294.0, 3348.0], [293.0, 1715.0], [317.0, 2842.0], [319.0, 2908.5], [316.0, 2849.0], [306.0, 2831.0], [305.0, 1222.0], [304.0, 10150.0], [315.0, 10330.0], [314.0, 2265.0], [313.0, 2261.0], [312.0, 1030.0], [311.0, 2218.0], [310.0, 2205.0], [308.0, 2113.5], [334.0, 9683.0], [332.0, 1120.0], [323.0, 7713.666666666667], [320.0, 2908.0], [331.0, 5120.5], [330.0, 2721.0], [329.0, 11047.0], [328.0, 9245.0], [327.0, 6675.5], [325.0, 10237.0], [324.0, 2927.0], [350.0, 8448.0], [351.0, 6505.0], [349.0, 8988.0], [347.0, 9892.0], [346.0, 9303.5], [344.0, 10037.0], [342.0, 8288.0], [341.0, 7418.0], [339.0, 7783.5], [338.0, 9322.0], [336.0, 10133.0], [360.0, 8808.0], [363.0, 5367.0], [362.0, 2149.0], [361.0, 9117.0], [357.0, 7615.5], [355.0, 7088.0], [354.0, 9763.0], [353.0, 9302.0], [352.0, 3144.0], [371.0, 7633.0], [377.0, 4754.0], [376.0, 1847.0], [379.0, 1716.0], [378.0, 9972.0], [374.0, 8898.0], [373.0, 922.0], [372.0, 6144.5], [370.0, 8170.0], [375.0, 1974.0], [383.0, 1721.0], [382.0, 10647.0], [381.0, 10633.0], [380.0, 8243.0], [397.0, 3208.5], [399.0, 5895.6], [398.0, 6249.333333333334], [396.0, 5437.75], [386.0, 6979.0], [385.0, 1824.0], [384.0, 8740.0], [394.0, 6924.833333333333], [395.0, 1487.0], [393.0, 6819.5], [392.0, 6847.285714285714], [391.0, 6579.5], [389.0, 5142.238095238095], [388.0, 1840.0], [390.0, 3567.6666666666665], [414.0, 8112.6], [415.0, 7317.75], [413.0, 6603.5], [412.0, 5736.666666666667], [411.0, 7105.75], [410.0, 7582.333333333333], [409.0, 8689.5], [408.0, 5666.5], [407.0, 7075.333333333333], [401.0, 6875.833333333334], [400.0, 10825.0], [403.0, 7741.5], [402.0, 8113.25], [406.0, 5293.333333333333], [405.0, 5024.0], [404.0, 7492.0], [419.0, 5690.333333333333], [431.0, 4058.0], [430.0, 5990.25], [429.0, 4610.0], [428.0, 1936.4], [426.0, 4415.0], [427.0, 917.0], [424.0, 5494.718749999999], [425.0, 3189.5], [423.0, 3456.0], [422.0, 1627.0], [421.0, 4717.666666666666], [420.0, 5521.3], [418.0, 5349.5], [416.0, 3567.666666666667], [417.0, 5460.666666666667], [446.0, 5331.6], [447.0, 6670.5], [445.0, 4405.333333333334], [444.0, 3894.6666666666665], [435.0, 4165.6], [433.0, 6077.0], [434.0, 5159.666666666667], [439.0, 8412.666666666666], [432.0, 5738.666666666667], [443.0, 4713.75], [442.0, 7370.0], [441.0, 4289.333333333333], [440.0, 5968.125], [438.0, 4380.333333333334], [437.0, 5864.875], [436.0, 1795.0], [462.0, 4902.099999999999], [463.0, 4712.454545454545], [460.0, 5545.5], [451.0, 4164.6], [450.0, 4042.5], [448.0, 4054.1666666666665], [449.0, 6370.0], [461.0, 6080.571428571428], [459.0, 5289.6], [458.0, 3735.769230769231], [457.0, 5726.444444444444], [456.0, 4386.1], [454.0, 4669.374999999999], [453.0, 4794.666666666667], [452.0, 5613.666666666667], [455.0, 4401.666666666667], [478.0, 3294.0], [479.0, 3663.0], [477.0, 4136.0], [476.0, 1674.0], [475.0, 4674.333333333333], [474.0, 5613.0], [473.0, 4584.0], [472.0, 6126.0], [471.0, 5352.333333333333], [465.0, 4691.8], [464.0, 5404.555555555556], [467.0, 5420.4], [466.0, 4306.900000000001], [470.0, 3579.0], [469.0, 2958.4], [468.0, 4220.0], [493.0, 6167.5], [483.0, 4573.0], [494.0, 6268.75], [492.0, 2328.3], [490.0, 4432.875], [491.0, 584.5], [489.0, 6022.0], [488.0, 3279.75], [495.0, 2391.6], [487.0, 6332.666666666667], [480.0, 6652.0], [482.0, 5763.5], [481.0, 4154.8], [486.0, 3101.0], [485.0, 5579.666666666667], [484.0, 3700.6666666666665], [511.0, 4822.0], [506.0, 4058.2], [505.0, 3512.5], [504.0, 5988.5], [508.0, 3912.3333333333335], [496.0, 5243.6], [498.0, 6818.0], [497.0, 4453.5], [499.0, 7716.0], [510.0, 4362.333333333333], [509.0, 3227.5], [507.0, 3938.8], [503.0, 3549.5], [502.0, 6128.4], [500.0, 6032.666666666667], [513.0, 5508.6], [512.0, 5159.666666666666], [517.0, 7140.75], [514.0, 6506.0], [1.0, 14030.0]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[353.2040000000001, 4582.241000000002]], "isOverall": false, "label": "Test-Aggregated", "isController": true}, {"data": [[2.0, 6759.0], [3.0, 6250.0], [4.0, 5610.0], [5.0, 4003.0], [6.0, 3590.0], [7.0, 3457.0], [8.0, 5267.0], [9.0, 3638.0], [10.0, 4845.0], [11.0, 5215.0], [12.0, 3255.0], [13.0, 3887.0], [14.0, 4783.0], [15.0, 7392.0], [16.0, 4819.0], [17.0, 3132.0], [19.0, 3105.0], [20.0, 3310.0], [22.0, 4788.0], [23.0, 4645.0], [24.0, 3067.0], [25.0, 4729.0], [26.0, 7178.0], [27.0, 5391.0], [28.0, 3549.0], [29.0, 3203.0], [30.0, 2891.0], [31.0, 2829.0], [34.0, 4418.333333333333], [37.0, 2920.0], [36.0, 3643.0], [39.0, 2597.0], [38.0, 2863.0], [41.0, 2652.0], [40.0, 3099.0], [43.0, 2954.0], [42.0, 2643.0], [45.0, 6785.0], [47.0, 2584.0], [46.0, 3834.0], [48.0, 6800.0], [51.0, 4131.0], [50.0, 5389.0], [52.0, 5037.0], [55.0, 2449.0], [54.0, 3338.0], [57.0, 4919.0], [56.0, 2630.0], [59.0, 3082.0], [58.0, 4387.0], [61.0, 4966.0], [60.0, 2423.0], [62.0, 2789.0], [67.0, 3031.0], [66.0, 3991.0], [64.0, 3786.0], [69.0, 2359.0], [68.0, 3006.0], [75.0, 4391.0], [74.0, 4870.0], [73.0, 4551.0], [72.0, 2569.0], [77.0, 2863.0], [81.0, 2043.0], [80.0, 3090.3333333333335], [86.0, 2310.0], [85.0, 4859.0], [91.0, 2706.0], [90.0, 2476.0], [89.0, 5168.0], [88.0, 3112.0], [95.0, 2667.0], [93.0, 3399.5], [98.0, 2246.0], [97.0, 2922.0], [96.0, 2690.5], [103.0, 2433.0], [102.0, 2431.0], [105.0, 2398.0], [104.0, 2681.0], [126.0, 2523.0], [135.0, 2205.0], [134.0, 2128.0], [132.0, 2992.0], [130.0, 2171.5], [128.0, 6331.0], [143.0, 3757.0], [142.0, 2248.5], [141.0, 3337.0], [140.0, 2429.0], [139.0, 2461.0], [137.0, 3315.5], [151.0, 2359.0], [150.0, 2376.3333333333335], [148.0, 2220.3333333333335], [147.0, 2543.0], [144.0, 3604.3333333333335], [159.0, 2181.0], [158.0, 4218.5], [157.0, 4163.0], [155.0, 2289.0], [153.0, 2365.0], [152.0, 3566.6666666666665], [167.0, 2344.0], [166.0, 2302.0], [165.0, 2722.0], [164.0, 2323.0], [162.0, 4405.0], [161.0, 3705.0], [160.0, 2318.0], [175.0, 3221.25], [173.0, 2446.0], [170.0, 2026.0], [169.0, 2045.0], [168.0, 2486.0], [182.0, 2077.0], [181.0, 2082.0], [180.0, 4283.0], [179.0, 3753.5], [178.0, 2040.5], [177.0, 2032.0], [191.0, 2226.5], [189.0, 3705.6666666666665], [186.0, 2071.0], [185.0, 2048.0], [184.0, 2149.0], [198.0, 2347.0], [197.0, 3111.0], [196.0, 2156.0], [195.0, 2141.6666666666665], [194.0, 2118.0], [193.0, 2759.0], [206.0, 2213.0], [205.0, 2232.5], [203.0, 2009.0], [201.0, 2144.3333333333335], [200.0, 2332.0], [215.0, 2025.0], [214.0, 2604.6666666666665], [212.0, 3617.6666666666665], [210.0, 2550.5], [208.0, 3198.5], [223.0, 6173.0], [222.0, 1980.0], [221.0, 2049.0], [220.0, 2026.0], [219.0, 2155.0], [218.0, 1985.0], [217.0, 2176.0], [216.0, 3615.0], [231.0, 2211.0], [230.0, 3957.5], [228.0, 3783.0], [227.0, 2220.0], [225.0, 2361.5], [238.0, 2131.5], [237.0, 2325.0], [236.0, 3699.0], [235.0, 2441.0], [234.0, 2194.0], [233.0, 2177.0], [232.0, 6101.0], [246.0, 2225.0], [245.0, 2875.0], [243.0, 2081.5], [241.0, 2241.6666666666665], [254.0, 3979.6666666666665], [251.0, 4482.0], [248.0, 2506.0], [270.0, 4266.0], [268.0, 2532.0], [267.0, 3420.0], [266.0, 3565.0], [265.0, 3523.0], [264.0, 3905.0], [263.0, 3910.0], [262.0, 3663.0], [259.0, 4496.0], [256.0, 3090.0], [286.0, 4262.0], [287.0, 3041.0], [285.0, 3559.0], [284.0, 3320.0], [283.0, 4251.5], [281.0, 4260.0], [280.0, 4275.0], [279.0, 3829.0], [272.0, 3521.0], [275.0, 2521.0], [274.0, 4463.5], [278.0, 3496.0], [277.0, 3471.0], [276.0, 3650.0], [302.0, 2781.0], [303.0, 2277.0], [301.0, 2897.0], [300.0, 3107.0], [299.0, 1427.5], [297.0, 1454.0], [296.0, 1616.0], [295.0, 1545.0], [288.0, 3314.0], [290.0, 4281.0], [289.0, 4275.0], [294.0, 3348.0], [293.0, 1715.0], [317.0, 2842.0], [319.0, 2908.5], [316.0, 2849.0], [306.0, 2831.0], [305.0, 1222.0], [304.0, 10150.0], [315.0, 10330.0], [314.0, 2265.0], [313.0, 2261.0], [312.0, 1030.0], [311.0, 2218.0], [310.0, 2205.0], [308.0, 2113.5], [334.0, 9683.0], [332.0, 1120.0], [323.0, 7713.666666666667], [320.0, 2908.0], [331.0, 5120.5], [330.0, 2721.0], [329.0, 11047.0], [328.0, 9245.0], [327.0, 6675.5], [325.0, 10237.0], [324.0, 2927.0], [350.0, 8448.0], [351.0, 6505.0], [349.0, 8988.0], [347.0, 9892.0], [346.0, 9303.5], [344.0, 10037.0], [342.0, 8288.0], [341.0, 7418.0], [339.0, 7783.5], [338.0, 9322.0], [336.0, 10133.0], [360.0, 8808.0], [363.0, 5367.0], [362.0, 2149.0], [361.0, 9117.0], [357.0, 7615.5], [355.0, 7088.0], [354.0, 9763.0], [353.0, 9302.0], [352.0, 3144.0], [371.0, 7633.0], [377.0, 4754.0], [376.0, 1847.0], [379.0, 1716.0], [378.0, 9972.0], [374.0, 8898.0], [373.0, 922.0], [372.0, 6144.5], [370.0, 8170.0], [375.0, 1974.0], [383.0, 1721.0], [382.0, 10647.0], [381.0, 10633.0], [380.0, 8243.0], [397.0, 3208.5], [399.0, 5895.6], [398.0, 6249.333333333334], [396.0, 5437.75], [386.0, 6979.0], [385.0, 1824.0], [384.0, 8740.0], [394.0, 6924.833333333333], [395.0, 1487.0], [393.0, 6819.5], [392.0, 6847.285714285714], [391.0, 6579.5], [389.0, 5142.238095238095], [388.0, 1840.0], [390.0, 3567.6666666666665], [414.0, 8112.6], [415.0, 7317.75], [413.0, 6603.5], [412.0, 5736.666666666667], [411.0, 7105.75], [410.0, 7582.333333333333], [409.0, 8689.5], [408.0, 5666.5], [407.0, 7075.333333333333], [401.0, 6875.833333333334], [400.0, 10825.0], [403.0, 7741.5], [402.0, 8113.25], [406.0, 5293.333333333333], [405.0, 5024.0], [404.0, 7492.0], [419.0, 5690.333333333333], [431.0, 4058.0], [430.0, 5990.25], [429.0, 4610.0], [428.0, 1936.4], [426.0, 4415.0], [427.0, 917.0], [424.0, 5494.718749999999], [425.0, 3189.5], [423.0, 3456.0], [422.0, 1627.0], [421.0, 4717.666666666666], [420.0, 5521.3], [418.0, 5349.5], [416.0, 3567.666666666667], [417.0, 5460.666666666667], [446.0, 5331.6], [447.0, 6670.5], [445.0, 4405.333333333334], [444.0, 3894.6666666666665], [435.0, 4165.6], [433.0, 6077.0], [434.0, 5159.666666666667], [439.0, 8412.666666666666], [432.0, 5738.666666666667], [443.0, 4713.75], [442.0, 7370.0], [441.0, 4289.333333333333], [440.0, 5968.125], [438.0, 4380.333333333334], [437.0, 5864.875], [436.0, 1795.0], [462.0, 4902.099999999999], [463.0, 4712.454545454545], [460.0, 5545.5], [451.0, 4164.6], [450.0, 4042.5], [448.0, 4054.1666666666665], [449.0, 6370.0], [461.0, 6080.571428571428], [459.0, 5289.6], [458.0, 3735.769230769231], [457.0, 5726.444444444444], [456.0, 4386.1], [454.0, 4669.374999999999], [453.0, 4794.666666666667], [452.0, 5613.666666666667], [455.0, 4401.666666666667], [478.0, 3294.0], [479.0, 3663.0], [477.0, 4136.0], [476.0, 1674.0], [475.0, 4674.333333333333], [474.0, 5613.0], [473.0, 4584.0], [472.0, 6126.0], [471.0, 5352.333333333333], [465.0, 4691.8], [464.0, 5404.555555555556], [467.0, 5420.4], [466.0, 4306.900000000001], [470.0, 3579.0], [469.0, 2958.4], [468.0, 4220.0], [493.0, 6167.5], [483.0, 4573.0], [494.0, 6268.75], [492.0, 2328.2999999999997], [490.0, 4432.875], [491.0, 584.5], [489.0, 6022.0], [488.0, 3279.75], [495.0, 2391.6], [487.0, 6332.666666666667], [480.0, 6652.0], [482.0, 5763.5], [481.0, 4154.8], [486.0, 3101.0], [485.0, 5579.666666666667], [484.0, 3700.6666666666665], [511.0, 4822.0], [506.0, 4058.2], [505.0, 3512.5], [504.0, 5988.5], [507.0, 3938.8], [508.0, 3912.3333333333335], [496.0, 5243.6], [498.0, 6818.0], [497.0, 4453.5], [499.0, 7716.0], [510.0, 4362.333333333333], [509.0, 3227.5], [503.0, 3549.5], [502.0, 6128.4], [500.0, 6032.666666666667], [513.0, 5508.6], [512.0, 5159.666666666666], [517.0, 7140.75], [514.0, 6506.0], [1.0, 14030.0]], "isOverall": false, "label": "https://reqres.in/api/users?page=2", "isController": false}, {"data": [[353.2040000000004, 4582.241000000002]], "isOverall": false, "label": "https://reqres.in/api/users?page=2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 517.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7500.0, "minX": 1.69272834E12, "maxY": 29143.166666666668, "series": [{"data": [[1.69272834E12, 29143.166666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69272834E12, 7500.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69272834E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4582.241000000002, "minX": 1.69272834E12, "maxY": 4582.241000000002, "series": [{"data": [[1.69272834E12, 4582.241000000002]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.69272834E12, 4582.241000000002]], "isOverall": false, "label": "https://reqres.in/api/users?page=2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69272834E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4573.823, "minX": 1.69272834E12, "maxY": 4573.823000000003, "series": [{"data": [[1.69272834E12, 4573.823]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.69272834E12, 4573.823000000003]], "isOverall": false, "label": "https://reqres.in/api/users?page=2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69272834E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4319.447999999999, "minX": 1.69272834E12, "maxY": 4319.448000000005, "series": [{"data": [[1.69272834E12, 4319.448000000005]], "isOverall": false, "label": "Test", "isController": true}, {"data": [[1.69272834E12, 4319.447999999999]], "isOverall": false, "label": "https://reqres.in/api/users?page=2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69272834E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 273.0, "minX": 1.69272834E12, "maxY": 14030.0, "series": [{"data": [[1.69272834E12, 14030.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69272834E12, 8364.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69272834E12, 10524.77]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69272834E12, 9314.349999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69272834E12, 273.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69272834E12, 4412.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69272834E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2401.0, "minX": 1.0, "maxY": 14030.0, "series": [{"data": [[2.0, 6504.5], [1.0, 14030.0], [77.0, 4821.0], [153.0, 2401.0], [165.0, 4808.0], [20.0, 4324.0], [169.0, 6477.0], [44.0, 4727.5], [89.0, 6231.0], [94.0, 5315.0], [62.0, 7449.0], [124.0, 2714.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 169.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2401.0, "minX": 1.0, "maxY": 13937.0, "series": [{"data": [[2.0, 6504.5], [1.0, 13937.0], [77.0, 4821.0], [153.0, 2401.0], [165.0, 4808.0], [20.0, 3986.5], [169.0, 6476.0], [44.0, 4727.5], [89.0, 6217.0], [94.0, 5293.0], [62.0, 7449.0], [124.0, 2700.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 169.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.69272834E12, "maxY": 16.666666666666668, "series": [{"data": [[1.69272834E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69272834E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.69272834E12, "maxY": 16.666666666666668, "series": [{"data": [[1.69272834E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69272834E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.69272834E12, "maxY": 16.666666666666668, "series": [{"data": [[1.69272834E12, 16.666666666666668]], "isOverall": false, "label": "Test-success", "isController": true}, {"data": [[1.69272834E12, 16.666666666666668]], "isOverall": false, "label": "https://reqres.in/api/users?page=2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69272834E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.69272834E12, "maxY": 33.333333333333336, "series": [{"data": [[1.69272834E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69272834E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

